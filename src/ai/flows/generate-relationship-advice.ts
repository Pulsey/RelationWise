'use server';
/**
 * @fileOverview This file defines a Genkit flow for generating relationship advice based on user-provided scenarios.
 *
 * It includes:
 * - generateRelationshipAdvice: A function to generate relationship advice.
 * - GenerateRelationshipAdviceInput: The input type for the generateRelationshipAdvice function.
 * - GenerateRelationshipAdviceOutput: The output type for the generateRelationshipAdvice function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const GenerateRelationshipAdviceInputSchema = z.object({
  scenario: z.string().describe('A detailed description of the relationship scenario or question.'),
});
export type GenerateRelationshipAdviceInput = z.infer<typeof GenerateRelationshipAdviceInputSchema>;

const GenerateRelationshipAdviceOutputSchema = z.object({
  advice: z.string().describe('Tailored relationship advice generated by the AI.'),
});
export type GenerateRelationshipAdviceOutput = z.infer<typeof GenerateRelationshipAdviceOutputSchema>;

export async function generateRelationshipAdvice(
  input: GenerateRelationshipAdviceInput
): Promise<GenerateRelationshipAdviceOutput> {
  return generateRelationshipAdviceFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateRelationshipAdvicePrompt',
  input: {
    schema: z.object({
      scenario: z.string().describe('A detailed description of the relationship scenario or question.'),
    }),
  },
  output: {
    schema: z.object({
      advice: z.string().describe('Tailored relationship advice generated by the AI.'),
    }),
  },
  prompt: `You are an AI relationship advisor. A user will provide a scenario, and you will give them helpful and specific advice.

Scenario: {{{scenario}}}

Advice:`,
});

const generateRelationshipAdviceFlow = ai.defineFlow<
  typeof GenerateRelationshipAdviceInputSchema,
  typeof GenerateRelationshipAdviceOutputSchema
>({
  name: 'generateRelationshipAdviceFlow',
  inputSchema: GenerateRelationshipAdviceInputSchema,
  outputSchema: GenerateRelationshipAdviceOutputSchema,
},
async input => {
  const {output} = await prompt(input);
  return output!;
});

